import argparse
import ConfigParser
import os

from os.path import join
from zrst import asr

cluster = 50
gaussian = 1
state = 3
PHONE_LEVEL = True
TEST = False

### arg parser
parser = argparse.ArgumentParser(description='Running ULT')
parser.add_argument('config',help='corpus path config file')
args = parser.parse_args()

### read corpus config file
config = ConfigParser.ConfigParser()
config.read(args.config)
print config.get('ULT','corpus')

# ## set paths ###
opt = '_phone' if PHONE_LEVEL else ''
opt += '_TEST' if TEST else ''
target='timit'+'_c'+str(cluster)+'_s'+str(state)+'_g'+str(gaussian)+opt+'/'
#corpus_path = '/tmp2/b02902077/nchlt_tso/audio/wav_1/'
#corpus_path = '/tmp2/b02902077/timit/train/wav/'
corpus_path = config.get('ULT','corpus')
pwd_path = config.get('ULT','pwd')

target_path = join(pwd_path, 'Result/' +  target)
# init generated by matlab/clusterDetection.m
#initial_path = '/tmp2/b02902077/STD/Pattern/zrst/matlab/IDump_timit_'+str(cluster)+'.txt'
initial_path = join(pwd_path,'zrst/matlab/IDump_timit_'+str(cluster)+'.txt')
config_name = 'test_experiment'



# ## generate pattern ###
# declare object
A = asr.ASR(corpus=corpus_path, target=target_path, dump=initial_path,nState=state)
# initialize
A.initialization(comment=config_name)
# run for several iterations
for i in range (gaussian-1):
    A.iteration('a', config_name)
    # increase gaussian count by 1
    # always use 'a_keep' instead of 'a' when having more than 1 gaussian mixture
    A.iteration('a_mix', config_name)
    A.iteration('a_keep', config_name)
for i in range (30):
    A.iteration('a', config_name)
for i in range (30):
    A.iteration('al', config_name)
if not PHONE_LEVEL:
    for i in range (30):
        A.iteration('ax', config_name)

# ## continue interrupted work ###
# declare object
# A = asr.ASR(corpus=corpus_path, target=target_path, dump=initial_path)
# select interrupted folder
# A.offset = 3
# A.readASR(str(A.offset) + '_' + config_name)
# continue for some iterations
# A.iteration('a', config_name)
